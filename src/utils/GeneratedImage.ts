import {Tensor3D} from "@tensorflow/tfjs-core";
import * as tf from "@tensorflow/tfjs";
import p5Utils from "./p5Utils";
import {toBlob} from "./imageConversion";
import * as p5 from "p5";

/**
 * Object for an image generated by TensorFlow.
 *
 * Used in models including: CartoonGAN, DCGAN, UNET, BodyPix, CVAE, etc.
 */

export interface GeneratedImageResult {
    raw: Uint8ClampedArray; // TODO: is currently "raws" in CVAE
    src: string;
    blob: Blob;
    tensor?: Tensor3D;
    image?: p5.Image
}

/**
 * Takes a Tensor and returns an object containing multiple formats.
 * Will dispose of the Tensor if not returning the tensor.
 * Accepts settings as an object so that models can pass this.config.
 * @param tensor
 * @param settings
 */
export const generatedImageResult = async (tensor: Tensor3D, settings: {returnTensors?: boolean}): Promise<GeneratedImageResult> => {
    const {returnTensors = false} = settings;
    const canvas = document.createElement('canvas'); // consider using offScreenCanvas
    const raw = await tf.browser.toPixels(tensor, canvas);
    const src = canvas.toDataURL(); // default format type is image/png
    let image;
    if (p5Utils.checkP5()) {
        try {
            image = await p5Utils.loadAsync(src);
        } catch (e) {}
    }
    const blob = await toBlob(canvas);

    if ( returnTensors ) {
        return {src, raw, image, tensor, blob};
    } else {
        tensor.dispose();
        return {src, raw, image, blob};
    }
}